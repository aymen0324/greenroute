// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Simplified models for SQLite compatibility
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  password          String
  role              String    @default("VIEWER") // ADMIN, MANAGER, DRIVER, VIEWER
  isActive          Boolean   @default(true) @map("is_active")
  subscriptionTier  String    @default("FREE") @map("subscription_tier") // FREE, PRO, ENTERPRISE
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  createdRoutes Route[] @relation("RouteCreator")
  assignedRoutes Route[] @relation("RouteAssignee")
  vehicles      Vehicle[]
  deliveries    Delivery[]

  @@map("users")
}

model Route {
  id                      String   @id @default(cuid())
  name                    String
  startLocationLat        Float    @map("start_location_lat")
  startLocationLng        Float    @map("start_location_lng")
  startLocationAddress    String   @map("start_location_address")
  endLocationLat          Float    @map("end_location_lat")
  endLocationLng          Float    @map("end_location_lng")
  endLocationAddress      String   @map("end_location_address")
  waypointsData           String?  @map("waypoints_data") // JSON as string
  distanceKm              Float?   @map("distance_km")
  estimatedDurationMinutes Int?    @map("estimated_duration_minutes")
  actualDurationMinutes   Int?     @map("actual_duration_minutes")
  fuelConsumptionLiters   Float?   @map("fuel_consumption_liters")
  co2EmissionsKg          Float?   @map("co2_emissions_kg")
  costEuros               Float?   @map("cost_euros")
  status                  String   @default("PLANNED") // PLANNED, ACTIVE, COMPLETED, CANCELLED
  optimizationLevel       Float?   @map("optimization_level") // 0-100%
  createdBy               String   @map("created_by")
  assignedTo              String?  @map("assigned_to")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  creator    User       @relation("RouteCreator", fields: [createdBy], references: [id])
  assignee   User?      @relation("RouteAssignee", fields: [assignedTo], references: [id])
  vehicles   Vehicle[]
  deliveries Delivery[]

  @@map("routes")
}

model Vehicle {
  id                       String    @id @default(cuid())
  licensePlate             String    @unique @map("license_plate")
  model                    String
  manufacturer             String
  year                     Int
  fuelType                 String?   @map("fuel_type") // GASOLINE, DIESEL, ELECTRIC, HYBRID
  fuelCapacityLiters       Float?    @map("fuel_capacity_liters")
  fuelConsumptionPer100km  Float?    @map("fuel_consumption_per_100km")
  maxLoadKg                Float?    @map("max_load_kg")
  currentLocationLat       Float?    @map("current_location_lat")
  currentLocationLng       Float?    @map("current_location_lng")
  currentLocationTimestamp DateTime? @map("current_location_timestamp")
  status                   String    @default("AVAILABLE") // AVAILABLE, IN_TRANSIT, MAINTENANCE, OFFLINE
  lastMaintenanceKm        Int?      @map("last_maintenance_km")
  nextMaintenanceKm        Int?      @map("next_maintenance_km")
  totalKmDriven            Float?    @map("total_km_driven")
  ownerId                  String    @map("owner_id")
  currentRouteId           String?   @map("current_route_id")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  // Relations
  owner        User       @relation(fields: [ownerId], references: [id])
  currentRoute Route?     @relation(fields: [currentRouteId], references: [id])
  deliveries   Delivery[]

  @@map("vehicles")
}

model Delivery {
  id                     String    @id @default(cuid())
  trackingNumber         String    @unique @map("tracking_number")
  routeId                String    @map("route_id")
  vehicleId              String?   @map("vehicle_id")
  driverId               String    @map("driver_id")
  pickupLocationLat      Float     @map("pickup_location_lat")
  pickupLocationLng      Float     @map("pickup_location_lng")
  pickupLocationAddress  String    @map("pickup_location_address")
  deliveryLocationLat    Float     @map("delivery_location_lat")
  deliveryLocationLng    Float     @map("delivery_location_lng")
  deliveryLocationAddress String   @map("delivery_location_address")
  packageDetails         String?   @map("package_details") // JSON as string
  scheduledPickup        DateTime? @map("scheduled_pickup")
  actualPickup           DateTime? @map("actual_pickup")
  scheduledDelivery      DateTime? @map("scheduled_delivery")
  actualDelivery         DateTime? @map("actual_delivery")
  status                 String    @default("PENDING") // PENDING, PICKED_UP, IN_TRANSIT, DELIVERED, FAILED
  priority               String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  notes                  String?
  customerName           String?   @map("customer_name")
  customerPhone          String?   @map("customer_phone")
  customerEmail          String?   @map("customer_email")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  route   Route    @relation(fields: [routeId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  driver  User     @relation(fields: [driverId], references: [id])

  @@map("deliveries")
}

model Analytics {
  id         String   @id @default(cuid())
  routeId    String?  @map("route_id")
  vehicleId  String?  @map("vehicle_id")
  metricType String   @map("metric_type") // 'fuel_savings', 'co2_reduction', 'time_saved', etc.
  value      Float
  unit       String   // 'liters', 'kg', 'minutes', 'euros'
  date       String   // Date as string for SQLite
  metadata   String?  // JSON as string
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("analytics")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String   // ERROR, WARN, INFO, DEBUG
  service   String
  message   String
  metadata  String?  // JSON as string
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_logs")
}
