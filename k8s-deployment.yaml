# Kubernetes Deployment Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: greenroute
  labels:
    name: greenroute
    app: greenroute

---
# ConfigMap para variables de entorno
apiVersion: v1
kind: ConfigMap
metadata:
  name: greenroute-config
  namespace: greenroute
data:
  NODE_ENV: "production"
  FLASK_ENV: "production"
  DATABASE_URL: "postgresql://greenroute:password@postgres-service:5432/greenroute_db"
  REDIS_URL: "redis://redis-service:6379/0"

---
# Secret para datos sensibles
apiVersion: v1
kind: Secret
metadata:
  name: greenroute-secrets
  namespace: greenroute
type: Opaque
data:
  JWT_SECRET_KEY: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ== # base64 encoded
  BLOCKCHAIN_RPC_URL: aHR0cHM6Ly9wb2x5Z29uLW1haW5uZXQuaW5mdXJhLmlvL3YzL1lPVVJfUFJPSkVDVF9JRA== # base64 encoded

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: greenroute-frontend
  namespace: greenroute
  labels:
    app: greenroute-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: greenroute-frontend
  template:
    metadata:
      labels:
        app: greenroute-frontend
    spec:
      containers:
      - name: frontend
        image: greenroute/frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: greenroute-config
              key: NODE_ENV
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: greenroute-backend
  namespace: greenroute
  labels:
    app: greenroute-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: greenroute-backend
  template:
    metadata:
      labels:
        app: greenroute-backend
    spec:
      containers:
      - name: backend
        image: greenroute/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: greenroute-config
              key: FLASK_ENV
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: greenroute-config
              key: DATABASE_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: greenroute-secrets
              key: JWT_SECRET_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 5

---
# ML Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: greenroute-ml
  namespace: greenroute
  labels:
    app: greenroute-ml
spec:
  replicas: 1
  selector:
    matchLabels:
      app: greenroute-ml
  template:
    metadata:
      labels:
        app: greenroute-ml
    spec:
      containers:
      - name: ml-server
        image: greenroute/ml-server:latest
        ports:
        - containerPort: 8001
        env:
        - name: MODEL_PATH
          value: "/app/models"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            nvidia.com/gpu: 1
          limits:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 10

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: greenroute
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "greenroute_db"
        - name: POSTGRES_USER
          value: "greenroute"
        - name: POSTGRES_PASSWORD
          value: "password"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: greenroute
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: greenroute-frontend-service
  namespace: greenroute
spec:
  selector:
    app: greenroute-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  name: greenroute-backend-service
  namespace: greenroute
spec:
  selector:
    app: greenroute-backend
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: greenroute-ml-service
  namespace: greenroute
spec:
  selector:
    app: greenroute-ml
  ports:
  - protocol: TCP
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: greenroute
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: greenroute
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: greenroute
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: greenroute-frontend-hpa
  namespace: greenroute
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: greenroute-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: greenroute-backend-hpa
  namespace: greenroute
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: greenroute-backend
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
